<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Invitación de Boda</title>

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Cormorant:wght@400;600;700&family=Montserrat:wght@400;500&display=swap"
      rel="stylesheet"
    />
    <script is:inline>
      const hasBeenRedirected = sessionStorage.getItem("lang_redirected");

      if (!hasBeenRedirected) {
        const userLang = navigator.language.split("-")[0];
        const currentPath = window.location.pathname;

        if (userLang === "en" && currentPath === "/") {
          window.location.href = "/en/";
        }

        sessionStorage.setItem("lang_redirected", "true");
      }
    </script>
  </head>
  <body>
    <slot />
    <img
      src="/images/svg/footer-decoration-2.svg"
      alt="Decoración de esquina"
      class="decoration top-left"
      width="100"
      height="100"
    />
    <img
      src="/images/svg/footer-decoration.svg"
      alt="Decoración de esquina"
      class="decoration bottom-right"
      width="100"
      height="100"
    />
  </body>
</html>
<style is:global>
  :root {
    /* Colores */
    --color-brown: #c3937c;
    --color-gray: #787878;
    --color-green: #828b3a;
    --color-white: #ffffff;
    --color-red: #ff0051;

    /* Fuentes */
    --font-1: 3.8rem;
    --font-2: 2.3rem;
    --font-3: 1.7rem;
    --font-4: 1.3rem;
    --font-5: 1rem;
    --font-6: 0.8rem;
    --font-cursive: 5.5rem;

    /* Variables Animaciones */
    --durationAnimation: 0.7s;
    --delayAnimation: 0.5s;

    /* Family Fonts */
    --title-font: "Cormorant", serif;
    --body-font: "Montserrat", sans-serif;
  }

  :root.lang-es [lang="en"] {
    display: none;
  }

  :root.lang-en [lang="es"] {
    display: none;
  }
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h5,
  p,
  a {
    margin-block-start: 0px;
    margin-block-end: 0px;
  }

  /* Estilos base */

  body {
    font-family: var(--body-font);
    margin: 0;
    background-color: var(--color-white);
    position: relative;
    overflow-x: hidden;
  }

  h1,
  h2,
  h3 {
    font-family: var(--title-font);
    margin: 0;
  }

  .container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 3rem;
    padding: 5rem 6% 6rem;
    box-sizing: border-box;
    position: relative;
  }

  .container-before-gradient:before {
    content: "";
    position: absolute;
    top: -90px;
    left: 0;
    width: 100%;
    height: 90px;
    background: linear-gradient(
      180deg,
      rgba(255, 255, 255, 0.01) 0%,
      rgba(255, 255, 255, 1) 80%
    );
  }

  .container-after-gradient:after {
    content: "";
    position: absolute;
    bottom: -90px;
    left: 0;
    width: 100%;
    height: 90px;
    background: linear-gradient(
      0deg,
      rgba(255, 255, 255, 0.01) 0%,
      rgba(255, 255, 255, 1) 80%
    );
  }

  .decoration {
    position: absolute;
    width: 200px;
    height: auto;
    bottom: 0px;
  }

  .top-left {
    left: 0;
  }

  .bottom-right {
    right: 0;
  }

  /* --- ANIMACIONES GLOBALES --- */

  @keyframes slideInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  .anim-item {
    opacity: 0;
    transform: translateY(30px);
  }
  .animate .anim-item {
    animation: slideInUp 0.8s ease-out forwards;
  }

  /* --- MEDIA QUERIES --- */

  @media (max-width: 900px) {
    .container {
      padding: 3rem 6%;
      gap: 2rem;
    }
  }

  @media (max-width: 900px) {
    .decoration {
      width: 100px;
    }
  }
</style>
<script>
  function setupScrollAnimations() {
    const elementsToAnimate = document.querySelectorAll(".animate-on-scroll");

    if (elementsToAnimate.length === 0) {
      return;
    }

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("animate");
            observer.unobserve(entry.target);
          }
        });
      },
      {
        threshold: 0.5,
      }
    );

    elementsToAnimate.forEach((el) => observer.observe(el));
  }

  document.addEventListener("DOMContentLoaded", setupScrollAnimations);

  const lang = localStorage.getItem("lang") || "es";
  document.documentElement.lang = lang;
  document.documentElement.classList.add(`lang-${lang}`);
</script>
