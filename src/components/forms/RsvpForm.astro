---
import NumberStepper from "@/components/forms/NumberStepper.astro";
import Button from "@/components/Button.astro";

const { t } = Astro.props;
---

<div class="form-wrapper anim-item">
  <h2>{t.heading}</h2>
  <p>{t.description}</p>

  <form id="rsvp-form" class="form">
    <p class="toogle-text">{t.attendanceQuestion}</p>
    <div class="toggle-group">
      <div class="toggle">
        <span>{t.no}</span>
        <input type="checkbox" id="attending-toggle" class="ios-toggle" />
        <span>{t.yes}</span>
      </div>
    </div>

    <div class="input-group">
      <input type="text" id="name" name="name" required placeholder=" " autocomplete="name"/>
      <label for="name">{t.nameLabel}<span class="required-asterisk">*</span></label>
      <span class="error-message">{t.nameError}</span>
    </div>

    <div class="input-group">
      <label for="guest-select" class="static-label">{t.guestLabel}<span class="required-asterisk">*</span></label>
      <NumberStepper />
      <span class="error-message">{t.guestError}</span>
    </div>

    <div class="input-group">
      <textarea id="message" name="message" rows="4" placeholder=" "></textarea>
      <label for="message">{t.messageLabel}</label>
    </div>

    <Button
      text={t.submitText}
      type="submit"
      color="brown"
      variant="primary"
      id="submit-btn"
    />
  </form>
</div>

<div id="success-modal" class="modal-overlay">
  <div class="modal-content">
    <button id="close-modal-btn" class="close-btn">&times;</button>
    <h3>{t.successHeading}</h3>
    <p>{t.successMessage}</p>
  </div>
</div>

<style>
  .form-wrapper {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    text-align: center;
    background: var(--color-white);
    padding: 60px 2.5rem;
    border-radius: 40px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.08);
    max-width: 600px;
  }

  h2 {
    font-family: var(--font-body);
    font-size: var(--font-2);
    color: var(--color-gray);
    font-weight: bold;
  }

  p {
    font-size: var(--font-5);
    line-height: 1.7rem;
    color: var(--color-gray);
  }

  .form {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .input-group {
    position: relative;
    text-align: left;
  }

  .input-group label {
    position: absolute;
    left: 1rem;
    top: 1rem;
    color: var(--color-gray);
    pointer-events: none;
    transition: all 0.2s ease;
    background-color: var(--color-white);
    padding: 0 0.25rem;
    font-weight: normal;
  }

  .required-asterisk {
    color: var(--color-red);
    margin-left: 0.25rem;
  }

  .input-group .static-label {
    position: static;
    margin-bottom: 0.5rem;
    font-weight: bold;
    font-size: var(--font-6);
    background-color: transparent;
    padding: 0;
  }

  input[type="text"],
  textarea {
    width: 100%;
    padding: 1rem;
    border: 2px solid #ddd;
    border-radius: 10px;
    font-size: var(--font-5);
    box-sizing: border-box;
    transition: border-color 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    font-family: var(--font-body);
  }

  input:focus,
  textarea:focus {
    outline: none;
    border-color: var(--color-brown);
  }

  input:focus + label,
  input:not(:placeholder-shown) + label,
  textarea:focus + label,
  textarea:not(:placeholder-shown) + label {
    top: -0.7rem;
    font-size: 0.75rem;
    color: var(--color-brown);
  }

  textarea {
    resize: vertical;
  }

  .input-group.has-error input[type="text"],
  .input-group.has-error .stepper-container > div,
  .input-group.has-error textarea {
    border-color: var(--color-red);
  }

  .input-group.has-error .static-label,
  .input-group.has-error label:not(.static-label) {
    color: var(--color-red);
  }

  .error-message {
    display: none;
    color: var(--color-red);
    font-size: var(--font-6);
    margin-top: 0.25rem;
    padding-left: 0.25rem;
  }

  .input-group.has-error .error-message {
    display: block;
  }

  /* --- ESTILOS DEL TOGGLE SWITCH --- */
  .toggle-group {
    text-align: center;
  }
  .toogle-text {
    font-weight: bold;
    font-size: var(--font-4);
  }
  .toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
  }

  .toggle span {
    font-size: var(--font-4);
    color: var(--color-gray);
  }

  .ios-toggle {
    appearance: none;
    width: 60px;
    height: 30px;
    background: #ccc;
    border-radius: 15px;
    position: relative;
    cursor: pointer;
    outline: none;
    transition: background 0.3s ease;
  }

  .ios-toggle:checked {
    background: var(--color-green);
  }

  .ios-toggle::before {
    content: "";
    width: 26px;
    height: 26px;
    background: var(--color-white);
    border-radius: 50%;
    position: absolute;
    top: 2px;
    left: 2px;
    transition: transform 0.3s ease;
  }

  .ios-toggle:checked::before {
    transform: translateX(30px);
  }

  /* --- ESTILOS DEL MODAL --- */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.6);
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease;
  }

  .modal-overlay.is-visible {
    opacity: 1;
    visibility: visible;
  }

  .modal-content {
    background: var(--color-white);
    padding: 2rem 3rem;
    border-radius: 15px;
    text-align: center;
    position: relative;
    max-width: 500px;
    margin: 1rem;
  }

  .modal-content h3 {
    font-size: var(--font-2);
    color: var(--color-brown);
    margin-bottom: 1rem;
  }

  .close-btn {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    font-size: 2rem;
    cursor: pointer;
    color: #aaa;
  }

  /* --- MEDIA QUERIES--- */

  @media (max-width: 900px) {
    .form-wrapper {
      padding: 40px 2.5rem;
      width: 100%;
    }

    h2 {
      font-size: var(--font-3);
    }
  }

  @media (max-width: 500px) {
    .form-wrapper {
      padding: 1.5rem;
      gap: 1.5rem;
    }

    .toogle-text {
      font-size: var(--font-5);
    }

    .toggle {
      margin-bottom: 15px;
    }

    .toggle span {
      font-size: var(--font-5);
    }

    .form {
      gap: 1.5rem;
    }

    .input-group label {
      font-size: var(--font-6);
      top: 1.2rem;
    }
  }
</style>

<script>
  import confetti from "canvas-confetti";

  function setupRsvpForm() {

    const form = document.getElementById("rsvp-form");
    const nameInput = document.getElementById("name") as HTMLInputElement;
    const guestSelect = document.getElementById(
      "guest-select"
    ) as HTMLSelectElement;
    const submitBtn = document.getElementById("submit-btn");
    const attendingToggle = document.getElementById(
      "attending-toggle"
    ) as HTMLInputElement;
    const successModal = document.getElementById("success-modal");
    const closeModalBtn = document.getElementById("close-modal-btn");

    if (
      !form ||
      !nameInput ||
      !guestSelect ||
      !submitBtn ||
      !attendingToggle ||
      !successModal ||
      !closeModalBtn
    )
      return;

    const validateField = (
      inputElement: HTMLInputElement | HTMLSelectElement
    ) => {
      const group = inputElement.closest(".input-group");
      if (inputElement.value.trim() === "") {
        if (event?.type === "blur") {
          group?.classList.add("has-error");
        }
      } else {
        group?.classList.remove("has-error");
      }
    };

    const validateForm = () => {
      const isNameValid = nameInput.value.trim() !== "";
      const areGuestsSelected = guestSelect.value !== "";
      const isFormValid = isNameValid && areGuestsSelected;
      (submitBtn as HTMLButtonElement).disabled = !isFormValid;
    };

    nameInput.addEventListener("input", () => {
      validateField(nameInput);
      validateForm();
    });
    guestSelect.addEventListener("change", () => {
      validateField(guestSelect);
      validateForm();
    });

    nameInput.addEventListener("blur", () => validateField(nameInput));
    guestSelect.addEventListener("blur", () => validateField(guestSelect));

    attendingToggle.addEventListener("change", () => {
      if (attendingToggle.checked) {
        confetti({
          particleCount: 100,
          spread: 70,
          origin: { y: 0.6 },
          colors: ["#C3937C", "#828B3A", "#787878", "#FFFFFF"],
        });
      }
    });

    form.addEventListener("submit", (e) => {
      e.preventDefault();
      if ((submitBtn as HTMLButtonElement).disabled) return;

      successModal.classList.add("is-visible");
      document.body.classList.add("no-scroll");
    });

    const closeModal = () => {
      successModal.classList.remove("is-visible");
      document.body.classList.remove("no-scroll");
    };

    closeModalBtn.addEventListener("click", closeModal);
    successModal.addEventListener("click", (e) => {
      if (e.target === successModal) {
        closeModal();
      }
    });

    validateForm();
  }
  document.addEventListener("DOMContentLoaded", setupRsvpForm);
</script>
